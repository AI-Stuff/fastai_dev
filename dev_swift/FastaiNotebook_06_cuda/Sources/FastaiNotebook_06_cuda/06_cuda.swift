/*
THIS FILE WAS AUTOGENERATED! DO NOT EDIT!
file to edit: 06_cuda.ipynb

*/
        
import Path
import TensorFlow
import Python

public func conv<Scalar>(_ cIn: Int, _ cOut: Int, ks: Int = 3, stride: Int = 2) -> FAConv2D<Scalar> {
    return FAConv2D<Scalar>(filterShape: (ks, ks, cIn, cOut), 
                           strides: (stride,stride), 
                           padding: .same, 
                           activation: relu)
}

public struct CnnModel: Layer {
    public var reshape: Reshape<Float>
    public var convs: [FAConv2D<Float>]
    public var pool = FAAdaptiveAvgPool2D<Float>()
    public var flatten = Flatten<Float>()
    public var linear: FADense<Float>
    
    public init(sizeIn: Int, channelIn: Int, nOut: Int, filters: [Int]){
        reshape = Reshape<Float>([-1, sizeIn, sizeIn, channelIn])
        convs = []
        let allFilters = [channelIn] + filters
        for i in 0..<filters.count { convs.append(conv(allFilters[i], allFilters[i+1])) }
        linear = FADense<Float>(inputSize: filters.last!, outputSize: nOut)
    }
    
    @differentiable
    public func applied(to input: TF) -> TF {
        return input.sequenced(through: reshape, convs, pool, flatten, linear)
    }
}
