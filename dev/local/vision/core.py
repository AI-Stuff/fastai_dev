#AUTOGENERATED! DO NOT EDIT! File to edit: dev/06_vision_core.ipynb (unless otherwise specified).

__all__ = ['Image', 'PILImage', 'Imagify', 'Mask', 'Maskify', 'ImageConverter', 'image_resize', 'ImageResizer',
           'image2byte', 'ImageToByteTensor']

from ..imports import *
from ..test import *
from ..core import *
from ..data.pipeline import *
from ..data.core import *
from ..data.external import *

from PIL import Image

class PILImage():
    @staticmethod
    def show(o, ctx=None, **kwargs): return show_image(o, ctx=ctx, **kwargs)

class Imagify(Transform):
    "Open an `Image` from path `fn`"
    def __init__(self, func=Image.open):  self.func = func
    def encodes(self, fn)->PILImage: return self.func(fn)

class Mask(PILImage):
    @staticmethod
    def show(o, ctx=None, cmap='tab20', alpha=0.5, vmin=1, vmax=30, **kwargs):
        return show_image(o, ctx=ctx, cmap=cmap, alpha=alpha, vmin=vmin, vmax=vmax, **kwargs)

class Maskify(Transform):
    "Open an `Image` from path `fn`"
    def __init__(self, func=Image.open): self.func = func
    def encodes(self, fn)->Mask: return self.func(fn)

class ImageConverter(Transform):
    "Convert `img` to `mode`"
    def __init__(self, mode='RGB', mask_mode='L'): self.modes = (mode,mask_mode)
    def encodes(self, o:PILImage): return o.convert(self.modes[0])
    def encodes(self, o:Mask):     return o.convert(self.modes[1])

def image_resize(img, size, resample=Image.BILINEAR):
    "Resize image to `size` using `resample"
    return img.resize(size, resample=resample)
image_resize.order=10

class ImageResizer(Transform):
    "Resize image to `size` using `resample"
    def __init__(self, size, resample=Image.BILINEAR):
        if not is_listy(size): size=(size,size)
        self.size,self.resample = size,resample

    def encodes(self, o:PILImage): return image_resize(o, size=self.size, resample=self.resample)

def image2byte(img):
    "Transform image to byte tensor in `c*h*w` dim order."
    res = torch.ByteTensor(torch.ByteStorage.from_buffer(img.tobytes()))
    w,h = img.size
    return res.view(h,w,-1).permute(2,0,1)

class ImageToByteTensor(Transform):
    "Transform image to byte tensor in `c*h*w` dim order."
    order = 15
    def encodes(self, o:PILImage)->TensorImage: return image2byte(o)
    def encodes(self, o:Mask)    ->TensorMask:  return image2byte(o)[0]