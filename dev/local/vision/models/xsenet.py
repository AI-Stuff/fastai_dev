#AUTOGENERATED! DO NOT EDIT! File to edit: dev/xse_resnext.ipynb (unless otherwise specified).

__all__ = ['ProdLayer', 'inplace_relu', 'SEModule', 'ResnetBlock', 'Bottleneck', 'SEBlock', 'SEBottleneck',
           'SEResNetBlock', 'SEResNetBottleneck', 'SEResNeXtBlock', 'SEResNeXtBottleneck', 'SENet', 'xse_resnet18',
           'xse_resnext18_32x4d', 'xse_resnet34', 'xse_resnext34_32x4d', 'xse_resnet50', 'xse_resnext50_32x4d',
           'xse_resnet101', 'xse_resnet152', 'xse_resnext101_32x4d', 'xsenet154', 'se_kwargs1', 'se_kwargs2', 'g0',
           'g1']

#Cell
#Borrowed and adapted from https://github.com/Cadene/pretrained-models.pytorch/blob/master/pretrainedmodels/models/senet.py
from collections import OrderedDict
import math

import torch.nn as nn
from torch.utils import model_zoo

#Cell
from ...torch_basics import *
from ...test import *

#Cell
class ProdLayer(Module):
    "Merge a shortcut with the result of the module by multiplying them."
    def forward(self, x): return x * x.orig

#Cell
inplace_relu = partial(nn.ReLU, inplace=True)

#Cell
def SEModule(ch, reduction):
    return SequentialEx(nn.AdaptiveAvgPool2d(1),
                        ConvLayer(ch, ch//reduction, ks=1, norm_type=None, act_cls=inplace_relu),
                        ConvLayer(ch//reduction, ch, ks=1, norm_type=None, act_cls=nn.Sigmoid),
                        ProdLayer())

#Cell
class ResnetBlock(nn.Module):
    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample is not None: residual = self.downsample(x)
        out = self.se_module(out) + residual
        out = self.relu(out)
        return out

#Cell
class Bottleneck(nn.Module):
    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        out = self.conv3(out)
        out = self.bn3(out)
        if self.downsample is not None: residual = self.downsample(x)
        out = self.se_module(out) + residual
        out = self.relu(out)
        return out

#Cell
class SEBlock(ResnetBlock):
    expansion = 1

    def __init__(self, inplanes, planes, groups, reduction, stride=1, downsample=None):
        super().__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=3, stride=stride, padding=1, groups=groups, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, padding=1, bias=False)
        self.bn2 = BatchNorm(planes, norm_type=NormType.BatchZero)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes, reduction=reduction)
        self.downsample = downsample
        self.stride = stride

#Cell
class SEBottleneck(Bottleneck):
    expansion = 4

    def __init__(self, inplanes, planes, groups, reduction, stride=1,
                 downsample=None):
        super(SEBottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes * 2, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes * 2)
        self.conv2 = nn.Conv2d(planes * 2, planes * 4, kernel_size=3,
                               stride=stride, padding=1, groups=groups, bias=False)
        self.bn2 = nn.BatchNorm2d(planes * 4)
        self.conv3 = nn.Conv2d(planes * 4, planes * 4, kernel_size=1, bias=False)
        self.bn3 = BatchNorm(planes*4, norm_type=NormType.BatchZero)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes * 4, reduction=reduction)
        self.downsample = downsample
        self.stride = stride

#Cell
class SEResNetBlock(ResnetBlock):
    expansion = 1

    def __init__(self, inplanes, planes, groups, reduction, stride=1, downsample=None):
        super().__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=3, padding=1, stride=stride, groups=groups, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, padding=1, bias=False)
        self.bn2 = BatchNorm(planes, norm_type=NormType.BatchZero)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes, reduction=reduction)
        self.downsample = downsample
        self.stride = stride

#Cell
class SEResNetBottleneck(Bottleneck):
    expansion = 4

    def __init__(self, inplanes, planes, groups, reduction, stride=1, downsample=None):
        super(SEResNetBottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, padding=1, stride=stride,
                               groups=groups, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)
        self.bn3 = BatchNorm(planes*4, norm_type=NormType.BatchZero)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes * 4, reduction=reduction)
        self.downsample = downsample
        self.stride = stride

#Cell
class SEResNeXtBlock(ResnetBlock):
    """
    ResNeXt block type C with a Squeeze-and-Excitation module.
    """
    expansion = 1

    def __init__(self, inplanes, planes, groups, reduction, stride=1, downsample=None, base_width=4):
        super().__init__()
        width = math.floor(planes * (base_width / 64)) * groups
        self.conv1 = nn.Conv2d(inplanes, width, kernel_size=3, stride=stride, padding=1, groups=groups, bias=False)
        self.bn1 = nn.BatchNorm2d(width)
        self.conv2 = nn.Conv2d(width, planes, kernel_size=3, padding=1, bias=False)
        self.bn2 = BatchNorm(planes, norm_type=NormType.BatchZero)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes, reduction=reduction)
        self.downsample = downsample
        self.stride = stride

#Cell
class SEResNeXtBottleneck(Bottleneck):
    """
    ResNeXt bottleneck type C with a Squeeze-and-Excitation module.
    """
    expansion = 4

    def __init__(self, inplanes, planes, groups, reduction, stride=1,
                 downsample=None, base_width=4):
        super(SEResNeXtBottleneck, self).__init__()
        width = math.floor(planes * (base_width / 64)) * groups
        self.conv1 = nn.Conv2d(inplanes, width, kernel_size=1, bias=False, stride=1)
        self.bn1 = nn.BatchNorm2d(width)
        self.conv2 = nn.Conv2d(width, width, kernel_size=3, stride=stride,
                               padding=1, groups=groups, bias=False)
        self.bn2 = nn.BatchNorm2d(width)
        self.conv3 = nn.Conv2d(width, planes * 4, kernel_size=1, bias=False)
        self.bn3 = BatchNorm(planes*4, norm_type=NormType.BatchZero)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes * 4, reduction=reduction)
        self.downsample = downsample
        self.stride = stride

#Cell
class SENet(nn.Module):

    def __init__(self, block, layers, groups, reduction, dropout_p=0.2,
                 inplanes=128, downsample_kernel_size=3, downsample_padding=1, c_out=1000):
        """
        Parameters
        ----------
        block (nn.Module): Bottleneck class.
            - For SENet154: SEBottleneck
            - For SE-ResNet models: SEResNetBottleneck
            - For SE-ResNeXt models:  SEResNeXtBottleneck
        layers (list of ints): Number of residual blocks for 4 layers of the
            network (layer1...layer4).
        groups (int): Number of groups for the 3x3 convolution in each
            bottleneck block.
            - For SENet154: 64
            - For SE-ResNet models: 1
            - For SE-ResNeXt models:  32
        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.
            - For all models: 16
        dropout_p (float or None): Drop probability for the Dropout layer.
            If `None` the Dropout layer is not used.
            - For SENet154: 0.2
            - For SE-ResNet models: None
            - For SE-ResNeXt models: None
        inplanes (int):  Number of input channels for layer1.
            - For SENet154: 128
            - For SE-ResNet models: 64
            - For SE-ResNeXt models: 64
        downsample_kernel_size (int): Kernel size for downsampling convolutions
            in layer2, layer3 and layer4.
            - For SENet154: 3
            - For SE-ResNet models: 1
            - For SE-ResNeXt models: 1
        downsample_padding (int): Padding for downsampling convolutions in
            layer2, layer3 and layer4.
            - For SENet154: 1
            - For SE-ResNet models: 0
            - For SE-ResNeXt models: 0
        c_out (int): Number of outputs in `last_linear` layer.
            - For all models: 1000
        """
        super(SENet, self).__init__()
        self.inplanes = inplanes
        layer0_modules = [
            nn.Sequential(
                nn.Conv2d(3, 32, 3, stride=2, padding=1, bias=False),
                nn.BatchNorm2d(32),
                nn.ReLU(inplace=True),
            ), nn.Sequential(
                nn.Conv2d(32, 32, 3, stride=1, padding=1, bias=False),
                nn.BatchNorm2d(32),
                nn.ReLU(inplace=True),
            ), nn.Sequential(
                nn.Conv2d(32, inplanes, 3, stride=1, padding=1, bias=False),
                nn.BatchNorm2d(inplanes),
                nn.ReLU(inplace=True),
            ), nn.MaxPool2d(3, stride=2, padding=1)
        ]
        self.layer0 = nn.Sequential(*layer0_modules)
        self.layer1 = self._make_layer(
            block,
            planes=64,
            blocks=layers[0],
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=1,
            downsample_padding=0
        )
        self.layer2 = self._make_layer(
            block,
            planes=128,
            blocks=layers[1],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.layer3 = self._make_layer(
            block,
            planes=256,
            blocks=layers[2],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.layer4 = self._make_layer(
            block,
            planes=512,
            blocks=layers[3],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.dropout = nn.Dropout(dropout_p) if dropout_p is not None else None
        self.last_linear = nn.Linear(512 * block.expansion, c_out)

    def _make_layer(self, block, planes, blocks, groups, reduction, stride=1,
                    downsample_kernel_size=1, downsample_padding=0):
        down_layers = [nn.AvgPool2d(2, ceil_mode=True)] if stride != 1 else []
        if self.inplanes != planes * block.expansion:
            down_layers += [
                nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=downsample_kernel_size,
                          padding=downsample_padding, bias=False),
                nn.BatchNorm2d(planes * block.expansion),
            ]
        downsample = nn.Sequential(*down_layers) if len(down_layers) else None
        layers = []
        layers.append(block(self.inplanes, planes, groups, reduction, stride, downsample))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups, reduction))

        return nn.Sequential(*layers)

    def features(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        return x

    def logits(self, x):
        x = self.avg_pool(x)
        if self.dropout is not None: x = self.dropout(x)
        x = x.view(x.size(0), -1)
        x = self.last_linear(x)
        return x

    def forward(self, x):
        x = self.features(x)
        x = self.logits(x)
        return x

#Cell
se_kwargs1 = dict(groups=1 , reduction=16, dropout_p=None, inplanes=64, downsample_kernel_size=1, downsample_padding=0)
se_kwargs2 = dict(groups=32, reduction=16, dropout_p=None, inplanes=64, downsample_kernel_size=1, downsample_padding=0)
g0 = [2,2,2,2]
g1 = [3,4,6,3]

def xse_resnet18(c_out=1000, pretrained=False):        return SENet(SEResNetBlock, g0, c_out=c_out, **se_kwargs1)
def xse_resnext18_32x4d(c_out=1000, pretrained=False): return SENet(SEResNeXtBlock, g0, c_out=c_out, **se_kwargs2)
def xse_resnet34(c_out=1000, pretrained=False):        return SENet(SEResNetBlock, g1, c_out=c_out, **se_kwargs1)
def xse_resnext34_32x4d(c_out=1000, pretrained=False): return SENet(SEResNeXtBlock, g1, c_out=c_out, **se_kwargs2)
def xse_resnet50(c_out=1000, pretrained=False):        return SENet(SEResNetBottleneck, g1, c_out=c_out, **se_kwargs1)
def xse_resnext50_32x4d(c_out=1000, pretrained=False): return SENet(SEResNeXtBottleneck, g1, c_out=c_out, **se_kwargs2)
def xse_resnet101(c_out=1000, pretrained=False):       return SENet(SEResNetBottleneck, [3,4,23,3], c_out=c_out, **se_kwargs1)
def xse_resnet152(c_out=1000, pretrained=False):       return SENet(SEResNetBottleneck, [3,8,36,3], c_out=c_out, **se_kwargs1)
def xse_resnext101_32x4d(c_out=1000, pretrained=False):return SENet(SEResNeXtBottleneck, [3,4,23,3], c_out=c_out, **se_kwargs2)
def xsenet154(c_out=1000, pretrained=False):
    return XSENet(XSEBottleneck, [3,8,36,3], groups=64, reduction=16, dropout_p=0.2, c_out=c_out)