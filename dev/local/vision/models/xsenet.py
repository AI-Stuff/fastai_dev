#AUTOGENERATED! DO NOT EDIT! File to edit: dev/xse_resnext.ipynb (unless otherwise specified).

__all__ = ['ProdLayer', 'inplace_relu', 'SEModule', 'ResnetBlock', 'Bottleneck', 'SEResNetBlock', 'SEBlock',
           'SEResNeXtBlock', 'XSENet', 'OldSENet', 'xse_resnet18', 'xse_resnext18_32x4d', 'xse_resnet34',
           'xse_resnext34_32x4d', 'xse_resnet50', 'xse_resnext50_32x4d', 'xse_resnet101', 'xse_resnext101_32x4d',
           'xse_resnet152', 'xsenet154', 'se_kwargs1', 'se_kwargs2', 'g0', 'g1', 'g2', 'g3']

#Cell
from ...torch_basics import *
from ...test import *

#Cell
class ProdLayer(Module):
    "Merge a shortcut with the result of the module by multiplying them."
    def forward(self, x): return x * x.orig

#Cell
inplace_relu = partial(nn.ReLU, inplace=True)

#Cell
def SEModule(ch, reduction):
    return SequentialEx(nn.AdaptiveAvgPool2d(1),
                        ConvLayer(ch, ch//reduction, ks=1, norm_type=None, act_cls=inplace_relu),
                        ConvLayer(ch//reduction, ch, ks=1, norm_type=None, act_cls=nn.Sigmoid),
                        ProdLayer())

#Cell
class ResnetBlock(nn.Module):
    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample is not None: residual = self.downsample(x)
        out = self.se_module(out) + residual
        out = self.relu(out)
        return out

#Cell
class Bottleneck(nn.Module):
    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        out = self.conv3(out)
        out = self.bn3(out)
        if self.downsample is not None: residual = self.downsample(x)
        out = self.se_module(out) + residual
        out = self.relu(out)
        return out

#Cell
class SEResNetBlock(Module):
    "SE block from `ni` to `nh` with `stride`"
    def __init__(self, expansion, ni, nf, groups, reduction, nh1=None, nh2=None, stride=1, act_cls=inplace_relu):
        if nh2 is None: nh2 = nf
        if nh1 is None: nh1 = nh2
        nf,ni = nf*expansion,ni*expansion
        layers  = [ConvLayer(ni,  nh2, 3, act_cls=act_cls, stride=stride, groups=groups),
                   ConvLayer(nh2, nf,  3, act_cls=None, norm_type=NormType.BatchZero)
        ] if expansion == 1 else [
                   ConvLayer(ni,  nh1, 1, act_cls=act_cls),
                   ConvLayer(nh1, nh2, 3, act_cls=act_cls, stride=stride, groups=groups),
                   ConvLayer(nh2, nf,  1, act_cls=None, norm_type=NormType.BatchZero)
        ]
        self.convs = nn.Sequential(*layers)
        self.idconv = noop if ni==nf else ConvLayer(ni, nf, 1, act_cls=None)
        self.pool = noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)
        self.se = SEModule(nf, reduction=reduction)
        self.act = act_cls()

    def forward(self, x): return self.act(self.se(self.convs(x)) + self.idconv(self.pool(x)))

#Cell
def SEBlock(expansion, ni, nf, groups, reduction, stride=1, act_cls=inplace_relu):
    return SEResNetBlock(expansion, ni, nf, groups, reduction, nh1=nf*2, nh2=nf*expansion, stride=stride, act_cls=act_cls)

#Cell
def SEResNeXtBlock(expansion, ni, nf, groups, reduction, stride=1, act_cls=inplace_relu, base_width=4):
    w = math.floor(nh * (base_width / 64)) * groups
    return SEResNetBlock(expansion, ni, nf, groups, reduction, nh2=w, stride=stride, act_cls=act_cls)

#Cell
class XSENet(nn.Sequential):
    def __init__(self, block, expansion, layers, groups, reduction, p=0.2, c_in=3, c_out=1000):
        stem = []
        sizes = [c_in,16,32,64] if c_in<3 else [c_in,32,32,64]
        for i in range(3):
            stem.append(ConvLayer(sizes[i], sizes[i+1], stride=2 if i==0 else 1))

        block_szs = [64//expansion,64,128,256,512] +[256]*(len(layers)-4)
        blocks = [self._make_layer(block, expansion, block_szs[i], block_szs[i+1], l, groups, reduction, 1 if i==0 else 2)
                  for i,l in enumerate(layers)]
        drop = [] if p is None else [nn.Dropout(p)]
        super().__init__(
            *stem,
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            *blocks,
            nn.AdaptiveAvgPool2d(1), Flatten(), *drop,
            nn.Linear(block_szs[-1]*expansion, c_out),
        )
        init_cnn(self)

    def _make_layer(self, block, expansion, ni, nf, blocks, groups, reduction, stride):
        return nn.Sequential(
            *[block(expansion, ni if i==0 else nf, nf, groups, reduction, stride=stride if i==0 else 1)
              for i in range(blocks)])

#Cell
class OldSENet(Module):

    def __init__(self, block, layers, groups, reduction, dropout_p=0.2,
                 inplanes=128, downsample_kernel_size=3, downsample_padding=1, c_out=1000):

        self.inplanes = inplanes
        layer0_modules = [
            nn.Sequential(
                nn.Conv2d(3, 32, 3, stride=2, padding=1, bias=False),
                nn.BatchNorm2d(32),
                nn.ReLU(inplace=True),
            ), nn.Sequential(
                nn.Conv2d(32, 32, 3, stride=1, padding=1, bias=False),
                nn.BatchNorm2d(32),
                nn.ReLU(inplace=True),
            ), nn.Sequential(
                nn.Conv2d(32, inplanes, 3, stride=1, padding=1, bias=False),
                nn.BatchNorm2d(inplanes),
                nn.ReLU(inplace=True),
            ), nn.MaxPool2d(3, stride=2, padding=1)
        ]
        self.layer0 = nn.Sequential(*layer0_modules)
        self.layer1 = self._make_layer(
            block,
            planes=64,
            blocks=layers[0],
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=1,
            downsample_padding=0
        )
        self.layer2 = self._make_layer(
            block,
            planes=128,
            blocks=layers[1],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.layer3 = self._make_layer(
            block,
            planes=256,
            blocks=layers[2],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.layer4 = self._make_layer(
            block,
            planes=512,
            blocks=layers[3],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.dropout = nn.Dropout(dropout_p) if dropout_p is not None else None
        self.last_linear = nn.Linear(512 * block.expansion, c_out)

    def _make_layer(self, block, planes, blocks, groups, reduction, stride=1,
                    downsample_kernel_size=1, downsample_padding=0):
        down_layers = [nn.AvgPool2d(2, ceil_mode=True)] if stride != 1 else []
        if self.inplanes != planes * block.expansion:
            down_layers += [
                nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=downsample_kernel_size,
                          padding=downsample_padding, bias=False),
                nn.BatchNorm2d(planes * block.expansion),
            ]
        downsample = nn.Sequential(*down_layers) if len(down_layers) else None
        layers = []
        layers.append(block(self.inplanes, planes, groups, reduction, stride, downsample))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups, reduction))

        return nn.Sequential(*layers)

    def features(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        return x

    def logits(self, x):
        x = self.avg_pool(x)
        if self.dropout is not None: x = self.dropout(x)
        x = x.view(x.size(0), -1)
        x = self.last_linear(x)
        return x

    def forward(self, x):
        x = self.features(x)
        x = self.logits(x)
        return x

#Cell
se_kwargs1 = dict(groups=1 , reduction=16, p=None)
se_kwargs2 = dict(groups=32, reduction=16, p=None)
g0 = [2,2,2,2]
g1 = [3,4,6,3]
g2 = [3,4,23,3]
g3 = [3,8,36,3]

def xse_resnet18(c_out=1000, pretrained=False):         return XSENet(SEResNetBlock,  1, g0, c_out=c_out, **se_kwargs1)
def xse_resnext18_32x4d(c_out=1000, pretrained=False):  return XSENet(SEResNeXtBlock, 1, g0, c_out=c_out, **se_kwargs2)
def xse_resnet34(c_out=1000, pretrained=False):         return XSENet(SEResNetBlock,  1, g1, c_out=c_out, **se_kwargs1)
def xse_resnext34_32x4d(c_out=1000, pretrained=False):  return XSENet(SEResNeXtBlock, 1, g1, c_out=c_out, **se_kwargs2)
def xse_resnet50(c_out=1000, pretrained=False):         return XSENet(SEResNetBlock,  4, g1, c_out=c_out, **se_kwargs1)
def xse_resnext50_32x4d(c_out=1000, pretrained=False):  return XSENet(SEResNeXtBlock, 4, g1, c_out=c_out, **se_kwargs2)
def xse_resnet101(c_out=1000, pretrained=False):        return XSENet(SEResNetBlock,  4, g2, c_out=c_out, **se_kwargs1)
def xse_resnext101_32x4d(c_out=1000, pretrained=False): return XSENet(SEResNeXtBlock, 4, g2, c_out=c_out, **se_kwargs2)
def xse_resnet152(c_out=1000, pretrained=False):        return XSENet(SEResNetBlock,  4, g3, c_out=c_out, **se_kwargs1)
def xsenet154(c_out=1000, pretrained=False):
    return SENet(SEBlock, g3, groups=64, reduction=16, p=0.2, c_out=c_out)