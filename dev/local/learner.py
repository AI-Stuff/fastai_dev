#AUTOGENERATED! DO NOT EDIT! File to edit: dev/12_learner.ipynb (unless otherwise specified).

__all__ = ['Callback', 'TrainEvalCallback', 'CancelFitException', 'CancelEpochException', 'CancelTrainException',
           'CancelValidException', 'CancelBatchException', 'event', 'Learner', 'VerboseCallback', 'Recorder']

from .imports import *
from .test import *
from .core import *
from .layers import *
from .data.pipeline import *
from .data.source import *
from .data.core import *
from .data.external import *
from .notebook.showdoc import show_doc
from .optimizer import *

@docs
class Callback():
    "Basic class handling tweaks of the training loop by changing a `Learner` in various events"
    order=0
    def __getattr__(self, k): return getattr(self.learn, k)

    @property
    def name(self):
        "Name of the `Callback`, camel-cased and with Callback removed"
        name = re.sub(r'Callback$', '', self.__class__.__name__)
        return camel2snake(name or 'callback')

    def __call__(self, event_name): getattr(self, event_name, noop)()

    _docs=dict(__call__="Call `self.{event_name}` if it's defined",
              __getattr__="Passthrough to get the attributes of `self.learn`",
              )

class TrainEvalCallback(Callback):
    "`Callback` that tracks the number of iterations done and properly sets training/eval mode"
    def begin_fit(self):
        "Set the iter and epoch counters to 0"
        self.learn.train_iter,self.learn.pct_train = 0,0.

    def begin_batch(self):
        "On the first batch, put the model on the right device"
        if self.learn.train_iter == 0: self.model.to(find_device(self.xb))

    def after_batch(self):
        "Update the iter counter (in training mode)"
        if not self.training: return
        self.learn.pct_train += 1./(self.n_iter*self.n_epoch)
        self.learn.train_iter   += 1

    def begin_epoch(self):
        "Set the model in training mode"
        self.learn.pct_train=self.epoch/self.n_epoch
        self.model.train()
        self.learn.training=True

    def begin_validate(self):
        "Set the model in validation mode"
        self.model.eval()
        self.learn.training=False

class CancelFitException  (Exception): pass
class CancelEpochException(Exception): pass
class CancelTrainException(Exception): pass
class CancelValidException(Exception): pass
class CancelBatchException(Exception): pass

CancelBatchException.__doc__ = "Skip the rest of this batch and go to `after_batch`"
CancelTrainException.__doc__ = "Skip the rest of the training part of the epoch and go to `after_epoch`"
CancelValidException.__doc__ = "Skip the rest of the validation part of the epoch and go to `after_epoch`"
CancelEpochException.__doc__ = "Skip the rest of this epoch and go to `after_epoch`"
CancelFitException  .__doc__ = "Interrupts training and go to `after_fit`"

event = SimpleNamespace(**{o:o for o in {
    'begin_fit', 'begin_epoch', 'begin_batch', 'after_pred', 'after_loss', 'after_backward',
    'after_step', 'after_cancel_batch', 'after_batch', 'after_cancel_train', 'begin_validate',
    'after_cancel_validate', 'after_cancel_epoch', 'after_epoch', 'after_cancel_fit', 'after_fit'
}})

event.__doc__ = "Object containing all possible events as attributes to get tab-completion and typo-proofing"

defaults.callbacks = [TrainEvalCallback]

class Learner():
    "Group together a `model`, some `data` and a `loss_func` to handle training"
    def __init__(self, model, data, loss_func, opt_func=SGD, lr=1e-2, splitter=trainable_params,
                 cbs=None, cb_funcs=None, metrics=None):
        self.model,self.data,self.loss_func = model,data,loss_func
        self.opt_func,self.lr,self.splitter,self.metrics = opt_func,lr,splitter,L(metrics)

        self.training,self.logger,self.opt = False,print,None
        self.cbs = L([])
        self.add_cbs(defaults.callbacks)
        self.add_cbs(cbs)
        self.add_cbs(cbf() for cbf in L(cb_funcs))

    def add_cbs(self, cbs):
        "Add `cbs` to the list of `Callback` and register `self` as their learner"
        for cb in L(cbs): self.add_cb(cb)

    def add_cb(self, cb):
        "Add `cb` to the list of `Callback` and register `self` as their learner"
        cb.learn = self
        setattr(self, cb.name, cb)
        self.cbs.append(cb)

    def remove_cbs(self, cbs):
        "Remove `cbs` from the list of `Callback` and deregister `self` as their learner"
        for cb in L(cbs): self.remove_cb(cb)

    def remove_cb(self, cb):
        "Add `cb` from the list of `Callback` and deregister `self` as their learner"
        cb.learn = None
        setattr(self, cb.name, None)
        if cb in self.cbs: self.cbs.remove(cb)

    def one_batch(self, xb, yb, i=None):
        "Train or evaluate `self.model` on batch `(xb,yb)`"
        try:
            if i is not None: self.iter = i
            self.xb,self.yb = xb,yb;                        self('begin_batch')
            self.pred = self.model(self.xb);                self('after_pred')
            self.loss = self.loss_func(self.pred, self.yb); self('after_loss')
            if not self.training: return
            self.loss.backward();                           self('after_backward')
            self.opt.step();                                self('after_step')
            self.opt.zero_grad()
        except CancelBatchException:                        self('after_cancel_batch')
        finally:                                            self('after_batch')

    def all_batches(self):
        "Train or evaluate `self.model` on all batches of `self.dl`"
        self.n_iter = len(self.dl)
        for i,(xb,yb) in enumerate(self.dl): self.one_batch(xb, yb, i)

    def do_begin_fit(self, n_epoch):
        "Prepare evertyhing for training `epochs` epochs"
        self.n_epoch,self.loss = n_epoch,tensor(0.)
        self('begin_fit')

    def do_epoch_train(self, epoch):
        "Execute the training part of the `epoch`-th epoch"
        self.epoch,self.dl = epoch,self.data.train_dl
        try:
            self('begin_epoch')
            self.all_batches()
        except CancelTrainException: self('after_cancel_train')

    def do_epoch_validate(self):
        "Execute the validation part of an epoch"
        try:
            self('begin_validate')
            with torch.no_grad():
                self.dl = self.data.valid_dl
                self.all_batches()
        except CancelValidException: self('after_cancel_validate')

    def fit(self, n_epoch, cbs=None, reset_opt=False):
        "Fit `self.model` for `epochs` using `cbs`. Optionally `reset_opt`."
        self.add_cbs(cbs)
        if reset_opt or not self.opt: self.opt = self.opt_func(self.splitter(self.model), lr=self.lr)

        try:
            self.do_begin_fit(n_epoch)
            for epoch in range(n_epoch):
                try:
                    self.do_epoch_train(epoch)
                    self.do_epoch_validate()
                except CancelEpochException: self('after_cancel_epoch')
                finally:                     self('after_epoch')

        except CancelFitException: self('after_cancel_fit')
        finally:
            self('after_fit')
            self.remove_cbs(cbs)

    def __call__(self, event_name):
        "Call `event_name` for all callbacks"
        assert hasattr(event, event_name)
        [cb(event_name) for cb in self.cbs.sorted("order")]

class VerboseCallback(Callback):
    "Callback that prints the name of each event called"
    def __call__(self, event_name):
        print(event_name)
        super().__call__(event_name)

class Recorder(Callback):
    "Callback that registers statistics (lr, loss and metrics) during training"
    def begin_fit(self):
        self.lrs,self.losses = [],[]

    def after_batch(self):
        if not self.training: return
        self.lrs.append(self.opt.hypers[-1]['lr'])
        self.losses.append(self.loss.detach().cpu())

    def plot_lr  (self): plt.plot(self.lrs)
    def plot_loss(self): plt.plot(self.losses)

    def plot(self, skip_last=0):
        losses = [o.item() for o in self.losses]
        n = len(losses)-skip_last
        plt.xscale('log')
        plt.plot(self.lrs[:n], losses[:n])