#AUTOGENERATED! DO NOT EDIT! File to edit: dev/02a_pipeline.ipynb (unless otherwise specified).

__all__ = ['get_func', 'show_title', 'Func', 'Sig', 'SelfFunc', 'Self', 'anno_ret', 'compose_tfms', 'Pipeline',
           'get_samples', 'TfmdList', 'TfmdDS', 'setattr_parent']

from ..imports import *
from ..test import *
from ..core import *
from .transform import *
from ..notebook.showdoc import show_doc

def get_func(t, name, *args, **kwargs):
    "Get the `t.name` (potentially partial-ized with `args` and `kwargs`) or `noop` if not defined"
    f = getattr(t, name, noop)
    return f if not (args or kwargs) else partial(f, *args, **kwargs)

def show_title(o, ax=None, ctx=None):
    "Set title of `ax` to `o`, or print `o` if `ax` is `None`"
    ax = ifnone(ax,ctx)
    if ax is None: print(o)
    else: ax.set_title(o)

class Func():
    "Basic wrapper around a `name` with `args` and `kwargs` to call on a given type"
    def __init__(self, name, *args, **kwargs): self.name,self.args,self.kwargs = name,args,kwargs
    def __repr__(self): return f'sig: {self.name}({self.args}, {self.kwargs})'
    def _get(self, t): return get_func(t, self.name, *self.args, **self.kwargs)
    def __call__(self,t): return L(t).mapped(self._get) if is_listy(t) else self._get(t)

class _Sig():
    def __getattr__(self,k):
        def _inner(*args, **kwargs): return Func(k, *args, **kwargs)
        return _inner

Sig = _Sig()

class SelfFunc():
    "Search for `name` attribute and call it with `args` and `kwargs` on any object it's passed."
    def __init__(self, nm, *args, **kwargs): self.nm,self.args,self.kwargs = nm,args,kwargs
    def __repr__(self): return f'self: {self.nm}({self.args}, {self.kwargs})'
    def __call__(self, o):
        if not is_listy(o): return getattr(o,self.nm)(*self.args, **self.kwargs)
        else: return [getattr(o_,self.nm)(*self.args, **self.kwargs) for o_ in o]

class _SelfFunc():
    def __getattr__(self,k):
        def _inner(*args, **kwargs): return SelfFunc(k, *args, **kwargs)
        return _inner

Self = _SelfFunc()

def anno_ret(func):
    "Get the return annotation of `func`"
    if isinstance(func,BasicTransform): return None
    ann = typing.get_type_hints(func)
    if not ann: return None
    typ = ann.get('return')
    return list(typ.__args__) if getattr(typ, '_name', '')=='Tuple' else typ

def compose_tfms(x, tfms, func_nm=None, reverse=False, **kwargs):
    "Apply all `func_nm` attribute of `tfms` on `x`, maybe in `reverse` order"
    if reverse: tfms = reversed(tfms)
    r = NoneType
    for f in tfms:
        if func_nm: f = getattr(f,func_nm,noop)
        r = anno_ret(f) or r
        x = f(x, **kwargs)
        if r!=NoneType: x=r(x)
    return x

class Pipeline():
    "A pipeline of composed (for encode/decode) transforms, setup with types"
    def __init__(self, funcs=None):
        if isinstance(funcs, Pipeline): funcs = funcs.fs
        self.fs = []
        for i,f in enumerate(L(funcs).sorted(key='order')):
            if not isinstance(f,BasicTransform): f = TupleTransform(f)
            self.fs.append(f)

    def __repr__(self): return f"Pipeline: {self.fs}"

    def setup(self, items=None):
        tfms,self.fs = self.fs,[]
        for t in tfms:
            if t.add_before_setup:     self.fs.append(t)
            if hasattr(t, 'setup'):    t.setup(items)
            if not t.add_before_setup: self.fs.append(t)

    def __call__(self, o, filt=None): return compose_tfms(o, self.fs, filt=filt)
    def decode  (self, i, filt=None): return compose_tfms(i, self.fs, func_nm='decode', reverse=True, filt=filt)

    def show(self, o, ctx=None, filt=None, **kwargs):
        for f in reversed(self.fs):
            if hasattr(o, 'show'): return o.show(ctx)
            o = f.decode(o, filt=filt)
        if hasattr(o, 'show'): return o.show(ctx)

def get_samples(b, max_rows=10):
    if isinstance(b, Tensor): return b[:max_rows]
    return zip(*L(get_samples(b_, max_rows) if not isinstance(b,Tensor) else b_[:max_rows] for b_ in b))

@docs
class TfmdList(GetAttr):
    "A `Pipeline` of `tfms` applied to a collection of `items`"
    _xtra = 'decode __call__ show'.split()

    def __init__(self, items, tfms, do_setup=True, parent=None):
        self.items,self.parent = L(items),parent
        self.default = self.tfms = Pipeline(tfms)
        if do_setup: self.setup()

    def __getitem__(self, i, filt=None):
        "Transformed item(s) at `i`"
        its = self.items[i]
        if is_iter(i):
            if not is_iter(filt): filt = L(filt for _ in i)
            return L(self.tfms(it, filt=f) for it,f in zip(its,filt))
        return self.tfms(its, filt=filt)

    def setup(self): self.tfms.setup(self)
    def subset(self, idxs): return self.__class__(self.items[idxs], self.tfms, do_setup=False, parent=self)
    def decode_at(self, idx, filt=None):
        return self.decode(self.__getitem__(idx,filt=filt), filt=filt)
    def show_at(self, idx, filt=None, **kwargs):
        return self.show(self.__getitem__(idx,filt=filt), filt=filt, **kwargs)
    def __eq__(self, b): return all_equal(self, b)
    def __len__(self): return len(self.items)
    def __iter__(self): return (self[i] for i in range_of(self))
    def __repr__(self): return f"{self.__class__.__name__}: {self.items}\ntfms - {self.tfms}"

    _docs = dict(setup="Transform setup with self",
                 decode_at="Decoded item at `idx`",
                 show_at="Show item at `idx`",
                 subset="New `TfmdList` that only includes items at `idxs`")

def _maybe_flat(t): return t[0] if len(t) == 1 else tuple(t)

class TfmdDS(TfmdList):
    def __init__(self, items, type_tfms=None, ds_tfms=None, do_setup=True):
        if type_tfms is None: type_tfms = [None]
        self.items = items
        self.tfmd_its = [TfmdList(items, t, do_setup=do_setup, parent=self) for t in type_tfms]
        self.__post_init__(items, ds_tfms, do_setup)

    def __post_init__(self, items, ds_tfms, do_setup):
        #To avoid dupe code with DataSource
        self.type_tfms = [it.tfms for it in self.tfmd_its]
        self.ds_tfms = Pipeline(ds_tfms, t=[t_.final_t for t_ in self.type_tfms])
        if do_setup: self.setup()

    def __getitem__(self, i, filt=None):
        its = _maybe_flat([it.__getitem__(i, filt=filt) for it in self.tfmd_its])
        if is_iter(i):
            if len(self.tfmd_its) > 1: its = zip(*L(its))
            if not is_iter(filt): filt = L(filt for _ in i)
            return L(self.ds_tfms(it, filt=f) for it,f in zip(its,filt))
        return self.ds_tfms(its, filt=filt)

    def decode(self, o, filt=None):
        o = self.ds_tfms.decode(o, filt=filt)
        if not is_listy(o): o = [o]
        return _maybe_flat([it.decode(o_, filt=filt) for o_,it in zip(o,self.tfmd_its)])

    def decode_batch(self, b, filt=None): return [self.decode(b_, filt=filt) for b_ in get_samples(b)]

    def show(self, o, ctx=None, filt=None, **kwargs):
        if self.ds_tfms.t_show is not None: return self.ds_tfms.show(o, ctx=ctx, filt=filt, **kwargs)
        o = self.ds_tfms.decode(o, filt=filt)
        if not is_listy(o): o = [o]
        for o_,it in zip(o,self.tfmd_its): ctx = it.show(o_, ctx=ctx, filt=filt, **kwargs)
        return ctx

    def setup(self): self.ds_tfms.setup(self)

    def subset(self, idxs):
        return self.__class__(self.items[idxs], self.type_tfms, self.ds_tfms, do_setup=False)

    def __repr__(self):
        return f"{self.__class__.__name__}: {self.items}\ntype tfms - {self.type_tfms}\nds tfms - {self.ds_tfms}"

add_docs(TfmdDS,
         "A `Dataset` created from raw `items` by calling each element of `tfms` on them",
         __getitem__="Call all `tfms` on `items[i]` then all `tuple_tfms` on the result",
         decode="Compose `decode` of all `tuple_tfms` then all `tfms` on `i`",
         decode_batch="`decode` all sample in a the batch `b`",
         show="Show item `o` in `ctx`",
         setup="Go through the transforms in order and call their potential setup on `items`",
         subset="New `TfmdDS` that only includes items at `idxs`")

def setattr_parent(o, k, v):
    if getattr(o, 'parent', False): setattr_parent(o.parent, k, v)
    if getattr(o, 'dsrc', False): setattr_parent(o.dsrc, k, v)
    setattr(o, k, v)