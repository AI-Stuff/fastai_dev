#AUTOGENERATED! DO NOT EDIT! File to edit: dev/03_pipeline.ipynb (unless otherwise specified).

__all__ = ['get_func', 'Func', 'Sig', 'SelfFunc', 'Self', 'compose_tfms', 'batch_to_samples', 'mk_transform',
           'Pipeline', 'TfmdList', 'TfmdDS']

from ..imports import *
from ..test import *
from ..core import *
from .transform import *
from ..notebook.showdoc import show_doc

def get_func(t, name, *args, **kwargs):
    "Get the `t.name` (potentially partial-ized with `args` and `kwargs`) or `noop` if not defined"
    f = getattr(t, name, noop)
    return f if not (args or kwargs) else partial(f, *args, **kwargs)

class Func():
    "Basic wrapper around a `name` with `args` and `kwargs` to call on a given type"
    def __init__(self, name, *args, **kwargs): self.name,self.args,self.kwargs = name,args,kwargs
    def __repr__(self): return f'sig: {self.name}({self.args}, {self.kwargs})'
    def _get(self, t): return get_func(t, self.name, *self.args, **self.kwargs)
    def __call__(self,t): return L(t).mapped(self._get) if is_listy(t) else self._get(t)

class _Sig():
    def __getattr__(self,k):
        def _inner(*args, **kwargs): return Func(k, *args, **kwargs)
        return _inner

Sig = _Sig()

class SelfFunc():
    "Search for `name` attribute and call it with `args` and `kwargs` on any object it's passed."
    def __init__(self, nm, *args, **kwargs): self.nm,self.args,self.kwargs = nm,args,kwargs
    def __repr__(self): return f'self: {self.nm}({self.args}, {self.kwargs})'
    def __call__(self, o):
        if not is_listy(o): return getattr(o,self.nm)(*self.args, **self.kwargs)
        else: return [getattr(o_,self.nm)(*self.args, **self.kwargs) for o_ in o]

class _SelfFunc():
    def __getattr__(self,k):
        def _inner(*args, **kwargs): return SelfFunc(k, *args, **kwargs)
        return _inner

Self = _SelfFunc()

def compose_tfms(x, tfms, is_enc=True, reverse=False, **kwargs):
    "Apply all `func_nm` attribute of `tfms` on `x`, maybe in `reverse` order"
    if reverse: tfms = reversed(tfms)
    for f in tfms:
        if not is_enc: f = f.decode
        x = f(x, **kwargs)
    return x

def batch_to_samples(b, max_samples=10):
    "'Transposes' a batch to (at most `max_samples`) samples"
    if isinstance(b, Tensor): return b[:max_samples]
    return L(batch_to_samples(b_, max_samples) for b_ in b).zipped()

def mk_transform(f, as_item=True):
    "Convert function `f` to `Transform` if it isn't already one"
    return f if isinstance(f,Transform) else Transform(f, as_item=as_item)

class Pipeline():
    "A pipeline of composed (for encode/decode) transforms, setup with types"
    def __init__(self, funcs=None, as_item=True, filt=None):
        if not funcs: funcs=[noop]
        if isinstance(funcs, Pipeline): funcs = funcs.fs
        self.filt = filt
        self.fs = L(funcs).mapped(mk_transform).sorted(key='order')
        self.set_as_item(as_item)

    def set_as_item(self, as_item):
        self.as_item = as_item
        for f in self.fs: f.as_item = as_item

    def setup(self, items=None):
        tfms,self.fs = self.fs,[]
        for t in tfms: self.add(t,items)

    def add(self,t, items=None):
        getattr(t, 'setup', noop)(items)
        self.fs.append(t)

    def __call__(self, o): return compose_tfms(o, tfms=self.fs, filt=self.filt)
    def decode  (self, o): return compose_tfms(o, tfms=self.fs, is_enc=False, reverse=True, filt=self.filt)
    def __repr__(self): return f"Pipeline: {self.fs}"
    def __getitem__(self,i): return self.fs[i]
    def decode_batch(self, b, max_samples=10): return batch_to_samples(b, max_samples=max_samples).mapped(self.decode)

    # TODO: move show_batch here of TfmDS?
    def show(self, o, ctx=None, **kwargs):
        for f in reversed(self.fs):
            res = self._show(o, ctx, **kwargs)
            if res is not None: return res
            o = f.decode(o, filt=self.filt)
        return self._show(o, ctx, **kwargs)

    def _show(self, o, ctx, **kwargs):
        o1 = [o] if self.as_item else o
        if not all(hasattr(o_, 'show') for o_ in o1): return
        for o_ in o1: ctx = o_.show(ctx=ctx, **kwargs)
        return 1 if ctx is None else ctx

class TfmdList():
    "A `Pipeline` of `tfms` applied to a collection of `items`"
    def __init__(self, items, tfms, do_setup=True, as_item=True, wrap_l=True, filt=None):
        self.items = L(items) if wrap_l else items
        self._mk_pipeline(tfms.tfms if isinstance(tfms,TfmdList) else tfms, do_setup=do_setup, as_item=as_item, filt=filt)

    def _mk_pipeline(self, tfms, do_setup, as_item, filt):
        if isinstance(tfms,Pipeline): do_setup=False
        self.tfms = Pipeline(tfms, as_item=as_item, filt=filt)
        if do_setup: self.setup()

    def get(self, i):
        "Transformed item(s) at `i`"
        its = self.items[i]
        if is_iter(i): return L(its).mapped(self._get)
        return self._get(its)

    def __getitem__(self, i): return self.get(i)
    def _get(self, it): return self.tfms(it)
    def subset(self, idxs): return self.__class__(self.items[idxs], self.tfms, do_setup=False)
    def decode_at(self, idx): return self.decode(self.get(idx))
    def show_at(self, idx, **kwargs): return self.show(self.get(idx), **kwargs)
    def decode_batch(self, b, max_samples=10): return batch_to_samples(b, max_samples=max_samples).mapped(self.decode)

    # Standard dunder magics
    def __eq__(self, b): return all_equal(self, b)
    def __len__(self): return len(self.items)
    def __iter__(self): return (self[i] for i in range_of(self))
    def __repr__(self): return f"{self.__class__.__name__}: {self.items}\ntfms - {self.tfms.fs}"

    # Delegating to `self.tfms`
    def show(self, o, **kwargs): return self.tfms.show(o, **kwargs)
    def setup(self): self.tfms.setup(self)
    def decode(self, x, **kwargs): return self.tfms.decode(x, **kwargs)
    def __call__(self, x, **kwargs): return self.tfms.__call__(x, **kwargs)

    @property
    def filt(self): return self.tfms.filt
    @filt.setter
    def filt(self,v): self._set_filt(v)
    def _set_filt(self, v): self.tfms.filt = v

@docs
class TfmdDS(TfmdList):
    "A dataset that creates a tuple from each `type_tfms`, passed thru `ds_tfms`"
    def __init__(self, items, type_tfms=None, ds_tfms=None, do_setup=True, filt=None):
        self.items = L(items)
        self.tls = [TfmdList(items, t, do_setup=do_setup, filt=filt) for t in L(type_tfms)]
        self._mk_pipeline(ds_tfms, do_setup=do_setup, as_item=False, filt=filt)

    def _get(self, it): return self.tfms(tuple(tl._get(it) for tl in self.tls))

    def decode(self, o):
        o = self.tfms.decode(o)
        return tuple(it.decode(o_) for o_,it in zip(o,self.tls))

    def show(self, o, ctx=None, **kwargs):
        # Currently we don't support showing at tuple level, so we just decode all tfms at once
        o = super().decode(o)
        for o_,it in zip(o,self.tls): ctx = it.show(o_, ctx=ctx, **kwargs)
        return ctx

    def setup(self): self.tfms.setup(self)
    def subset(self, idxs): return self.__class__(self.items[idxs], self.tls, self.tfms, do_setup=False)
    def __repr__(self): return f"{self.__class__.__name__}: tls - {self.tls}\nds tfms - {self.tfms}"

    def _set_filt(self,v):
        super()._set_filt(v)
        for tl in self.tls: tl.filt = v

    _docs=dict(
        get="Call all `tfms` on `items[i]` then all `tuple_tfms` on the result",
        decode="Compose `decode` of all `tuple_tfms` then all `tfms` on `i`",
        show="Show item `o` in `ctx`",
        subset="New `TfmdDS` that only includes items at `idxs`",
        setup="Go through the transforms in order and call their potential setup on `items`")