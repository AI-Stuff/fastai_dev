
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev/01_test.ipynb

import numpy as np,torch,operator,sys,os
from typing import Iterable, Iterator, Generator, Callable, Sequence
from torch import as_tensor,Tensor
from numpy import array,ndarray
from IPython.core.debugger import set_trace

def test(a,b,cmp,cname=None):
    "`assert` that `cmp(a,b)`; display inputs and `cname or cmp.__name__` if it fails"
    if cname is None: cname=cmp.__name__
    assert cmp(a,b),f"{cname}:\n{a}\n{b}"

def _all_equal(a,b): return len(a)==len(b) and all(equals(a_,b_) for a_,b_ in zip(a,b))

def equals(a,b):
    "test whether `a` and `b` are equal; supports sublists, tensors and arrays too"
    cmp = (torch.equal    if isinstance(a, Tensor  ) else
           np.array_equal if isinstance(a, ndarray ) else
           _all_equal     if isinstance(a, Iterable) else
           operator.eq)
    return cmp(a,b)
def nequals(a,b): return not equals(a,b)

def test_fail(f, msg='', contains=None):
    "Check that `f()` raises an exception and (optionally) has `contains` in arg; if not, display `msg`"
    try:
        f()
        assert False,f"Expected exception but none raised. {msg}"
    except Exception as e: assert contains is None or contains in e.args[0]

def test_eq(a,b):
    "`assert` that `a==b`"
    test(a,b,equals, '==')

def test_ne(a,b):
    "`assert` that `a!=b`"
    test(a,b,nequals,'!=')